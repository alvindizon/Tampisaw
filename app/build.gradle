apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: "androidx.navigation.safeargs.kotlin"
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'kotlin-parcelize'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

android {
    compileSdkVersion buildVersions.compileSdk

    defaultConfig {
        applicationId "com.alvindizon.tampisaw"
        minSdkVersion buildVersions.minSdk
        targetSdkVersion buildVersions.targetSdk
        versionCode 1
        versionName "1.0.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField "String", "ACCESS_KEY", "\"" + getAccessKey() + "\""
        vectorDrawables.useSupportLibrary true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildFeatures {
        viewBinding true
        dataBinding true
    }
    testOptions {
        unitTests.all {
            useJUnitPlatform()
            // Show test results.
            testLogging {
                events "passed", "skipped", "failed"
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation project(":data:api")
    implementation project(":data:networking")
    implementation project(":common:core")
    testImplementation project(":common:testbase")
    implementation project(":feature:downloadwallpaper")
    implementation project(":feature:setwallpaper")
    implementation project(":feature:details")
    implementation deps.androidX.coreKtx
    implementation deps.androidX.appCompat
    implementation deps.androidX.constraintLayout

    // test
    testImplementation deps.junit
    testImplementation deps.coroutines.test
    testImplementation deps.androidX.test.core
    testImplementation deps.mockk

    androidTestImplementation deps.androidX.test.testExtJunit
    androidTestImplementation deps.androidX.test.espresso
    androidTestImplementation deps.androidX.test.core

    // Hilt
    implementation deps.dagger.hilt
    implementation deps.androidX.hiltWork
    kapt deps.dagger.hiltCompiler
    kapt deps.androidX.hiltCompiler

    // Material Design
    implementation deps.material

    // Lifecycle libs
    implementation deps.androidX.lifecycle.viewmodel
    implementation deps.androidX.lifecycle.livedata
    implementation deps.androidX.lifecycle.runtime
    implementation deps.androidX.lifecycle.common
    implementation deps.androidX.lifecycle.reactiveStreams

    // RxJava
    implementation deps.rxjava.rxandroid
    implementation deps.rxjava.rxjava
    implementation deps.rxjava.rxkotlin

    // Find annoying Dagger/Databinding compile-time bugs
    implementation deps.findBugs

    // Retrofit
    implementation deps.network.retrofit.retrofit
    implementation deps.network.retrofit.rxjava
    implementation deps.network.retrofit.moshi

    // Moshi
    implementation deps.network.moshi.moshi
    kapt deps.network.moshi.codegen

    // Http Logging
    implementation deps.network.interceptor

    // Shimmer UI
    implementation deps.androidVeil

    // Glide
    implementation deps.glide

    // Paging
    implementation deps.androidX.paging.runtime
    implementation deps.androidX.paging.rxjava

    // Preference
    implementation deps.androidX.preference

    //Navigation
    implementation deps.androidX.navigation.fragment
    implementation deps.androidX.navigation.ui
    
    // Expandable FAB
    implementation deps.expandableFAB

    // WorkManager
    implementation deps.androidX.work.runtime
    implementation deps.androidX.work.rxjava
    implementation deps.androidX.futures

    // Okio
    implementation deps.network.okio
    
    // Swipe Refresh Layout
    implementation deps.androidX.swipeRefreshLayout

    // Timber
    implementation deps.timber
    
    // Splash Screen
    implementation deps.androidX.splashScreen

    // Firebase
    implementation platform(deps.firebase.bom)
    implementation deps.firebase.analytics
    implementation deps.firebase.crashlytics

    // LeakCanary
    debugImplementation deps.leakCanary
}

String getAccessKey() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def applicationKey = properties.getProperty('ACCESS_KEY')
    if (applicationKey == null || "" == applicationKey) {
        throw new IllegalStateException("Set your Unsplash API access key in local.properties file. Get your own Unsplash API Access key from here : https://unsplash.com/oauth/applications")
    }
    return applicationKey
}
