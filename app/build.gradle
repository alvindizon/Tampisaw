apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: "androidx.navigation.safeargs.kotlin"
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'kotlin-parcelize'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

android {
    compileSdkVersion rootProject.compileSdkVersion

    defaultConfig {
        applicationId "com.alvindizon.tampisaw"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode 1
        versionName "1.0.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField "String", "ACCESS_KEY", "\"" + getAccessKey() + "\""
        vectorDrawables.useSupportLibrary true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions { // this needs to be set if you want your decompiled Java code at Java 8
        jvmTarget = "1.8"
        freeCompilerArgs += [
                "-Xopt-in=kotlinx.coroutines.ExperimentalCoroutinesApi",
                "-Xopt-in=androidx.paging.ExperimentalPagingApi"
        ]
    }

    buildFeatures {
        viewBinding true
        dataBinding true
    }
    testOptions {
        unitTests.all {
            useJUnitPlatform()
            // Show test results.
            testLogging {
                events "passed", "skipped", "failed"
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "androidx.core:core-ktx:$ktxVersion"
    implementation "androidx.appcompat:appcompat:$appCompatVersion"
    implementation "androidx.constraintlayout:constraintlayout:$constraintLayoutVersion"

    // test
    testImplementation "org.junit.jupiter:junit-jupiter:$junitVersion"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutineVersion"
    testImplementation "androidx.arch.core:core-testing:$coreTestingVersion"
    testImplementation "io.mockk:mockk:$mockkVersion"

    androidTestImplementation "androidx.test.ext:junit:$testExtJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
    androidTestImplementation "androidx.arch.core:core-testing:$coreTestingVersion"

    // Hilt
    implementation "com.google.dagger:hilt-android:$hiltVersion"
    implementation "androidx.hilt:hilt-work:$hiltAndroidXVersion"
    kapt "com.google.dagger:hilt-android-compiler:$hiltVersion"
    kapt "androidx.hilt:hilt-compiler:$hiltAndroidXVersion"

    // Material Design
    implementation "com.google.android.material:material:$materialVersion"

    // Lifecycle libs
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-reactivestreams-ktx:$lifecycleVersion"

    // RxJava
    implementation "io.reactivex.rxjava3:rxandroid:$rxAndroidVersion"
    implementation "io.reactivex.rxjava3:rxjava:$rxJavaVersion"
    implementation "io.reactivex.rxjava3:rxkotlin:$rxKotlinVersion"

    // Find annoying Dagger/Databinding compile-time bugs
    implementation "com.google.code.findbugs:jsr305:$findBugsVersion"

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava3:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-moshi:$retrofitVersion"

    // Moshi
    implementation "com.squareup.moshi:moshi:$moshiVersion"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:$moshiVersion"

    // Http Logging
    implementation "com.squareup.okhttp3:logging-interceptor:$okHttpLogInterceptorVer"

    // Shimmer UI
    implementation "com.github.skydoves:androidveil:$androidVeilVersion"

    // Glide
    implementation "com.github.bumptech.glide:glide:$glideVersion"

    // Paging
    implementation "androidx.paging:paging-runtime:$pagingVersion"
    implementation "androidx.paging:paging-rxjava3:$pagingVersion"

    // Preference
    implementation "androidx.preference:preference:$preferenceVersion"

    //Navigation
    implementation "androidx.navigation:navigation-fragment-ktx:$navigationVersion"
    implementation "androidx.navigation:navigation-ui-ktx:$navigationVersion"
    
    // Expandable FAB
    implementation "com.nambimobile.widgets:expandable-fab:$fabVersion"

    // WorkManager
    implementation "androidx.work:work-runtime-ktx:$workVersion"
    implementation "androidx.work:work-rxjava3:$workVersion"
    implementation "androidx.concurrent:concurrent-futures-ktx:$concurrentVersion"

    // Okio
    implementation "com.squareup.okio:okio:$okioVersion"
    
    // Swipe Refresh Layout
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:$swipeRefreshLayoutVersion"
    
    // Timber
    implementation "com.jakewharton.timber:timber:$timberVersion"
    
    // Splash Screen
    implementation "androidx.core:core-splashscreen:$splashScreenVersion"

    // Firebase
    implementation platform("com.google.firebase:firebase-bom:$firebaseVersion")
    implementation "com.google.firebase:firebase-analytics-ktx"
    implementation "com.google.firebase:firebase-crashlytics-ktx"

    // LeakCanary
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leakCanaryVersion"
}

String getAccessKey() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def applicationKey = properties.getProperty('ACCESS_KEY')
    if (applicationKey == null || "" == applicationKey) {
        throw new IllegalStateException("Set your Unsplash API access key in local.properties file. Get your own Unsplash API Access key from here : https://unsplash.com/oauth/applications")
    }
    return applicationKey
}
